import { InvalidOperationError, isNil } from "@oliversalzburg/js-utils";
import fs from "node:fs/promises";
import path from "node:path";

export const SCRIPTS_METADATA_DEFAULT_FILENAME = "package.json-scripts.json";

export class ScriptStoreEntry {
  manifestPath: string;
  projectName: string;
  scriptName: string;
  scriptCode: string;
  isGlobal: boolean;
  isRootManifest: boolean;
  description?: string | undefined;

  constructor(
    manifestPath: string,
    projectName: string,
    scriptName: string,
    scriptCode: string,
    isGlobal: boolean,
    isRootManifest = false,
  ) {
    this.manifestPath = manifestPath;
    this.projectName = projectName;
    this.scriptName = scriptName;
    this.scriptCode = scriptCode;
    this.isGlobal = isGlobal;
    this.isRootManifest = isRootManifest;
  }
}

export class ScriptStore {
  comment = "This file is generated by node-scripts-docs.";
  scripts = new Array<ScriptStoreEntry>();
  version = 1;
  #filename: string;
  #rootDirectory: string;

  get globalScripts() {
    return this.scripts.filter(scriptMeta => scriptMeta.isGlobal);
  }

  constructor(rootDirectory: string, filename = SCRIPTS_METADATA_DEFAULT_FILENAME) {
    this.#rootDirectory = rootDirectory;
    this.#filename = filename;
  }

  add(
    manifestPath: string,
    projectName: string,
    scriptName: string,
    scriptCode: string,
    isGlobal: boolean,
    isRootManifest = false,
  ) {
    this.scripts.push(
      new ScriptStoreEntry(
        manifestPath,
        projectName,
        scriptName,
        scriptCode,
        isGlobal,
        isRootManifest,
      ),
    );

    // Assume consistent order is best preserved on insert.
    this.scripts.sort(
      (a, b) =>
        a.scriptName.localeCompare(b.scriptName) || a.projectName.localeCompare(b.projectName),
    );
  }

  async save(filename?: string) {
    return fs.writeFile(
      path.resolve(this.#rootDirectory, filename ?? this.#filename),
      JSON.stringify(this, undefined, 2),
    );
  }

  async load(filename?: string) {
    const storeContent = await fs.readFile(
      path.resolve(this.#rootDirectory, filename ?? this.#filename),
      "utf-8",
    );
    const store = JSON.parse(storeContent) as ScriptStore;
    if (store.version && store.version !== this.version) {
      throw new Error("Unexpected version mismatch!");
    }
    this.scripts = store.scripts;
  }

  static makeScriptLocator(projectName: string, scriptName: string) {
    return `${scriptName}→${projectName}`;
  }

  static parseScriptLocator(locator: string) {
    const parts = /([^→]+)→(.+)/.exec(locator);
    if (isNil(parts)) {
      throw new InvalidOperationError(`The locator '${locator}' is invalid.`);
    }

    return {
      projectName: parts[2],
      scriptName: parts[1],
    };
  }

  static async exists(storePath: string) {
    try {
      await fs.stat(storePath);
    } catch {
      return false;
    }

    return true;
  }
}
